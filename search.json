[{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/Introduction.html","id":"rcollectl-workflow","dir":"Articles","previous_headings":"","what":"Rcollectl Workflow","title":"Introducton to RcollectlWorkflowh5ad","text":"vignette package follows single-cell analysis workflow (workflow chapters “Orchestrating Single-Cell Analysis Bioconductor” book) analyze h5ad file cellxgene dataset tracks computing resources usage R package Rcollectl. Suggested computing resources: 60 GB memory, 3 CPU cores parameter knitr_eval set TRUE knit vignette. FileId file id h5ad file analyze. Sample one column names. Build docker image files inst/docker: Knit vignette built docker image generate output LOCAL_DIRECTORY:","code":"docker build -t bioconductor_docker_workflow_cellxgene_h5ad:devel . docker run -it -v LOCAL_DIRECTORY:/output --rm \\     --env knitr_eval=TRUE \\     --env fileId=\"e2874fd9-af11-4adf-a47a-f380b7606434\" \\     --env sample=\"Name\" \\     --env dgCMatrix=TRUE \\     --env core=3 \\     --env mem_gb=60 \\     bioconductor_docker_workflow_cellxgene_h5ad:devel"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/performance_summary.html","id":"time-and-resources-spent-in-the-workflow","dir":"Articles","previous_headings":"","what":"Time and resources spent in the workflow","title":"Performance Summary","text":"CPU usage, memory usage running time compared DelayedArray vs dgcMatrix medium vs large size file. 240 GB memory 3 cpus used. Medium: number cells: 94256, large: number cells: 168860 CPU mean Memory max Time","code":""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/performance_summary.html","id":"workflow-running-performance-of-delayedarray-with-different-parameters-setup","dir":"Articles","previous_headings":"","what":"Workflow running performance of DelayedArray with different parameters setup","title":"Performance Summary","text":"reading H5AD file SingleCellExperiment object assays loaded DelayedArray, set auto block size number cpus impact workflow running performance. Running time, memory usage cpu usage evaluated , workflow step variance modeling (function scran::modelGeneVarByPoisson) taken example.","code":"# autoBlockSize library(Rcollectl) times_delayed_block_size <- lapply(67108864L * 2L^(0:5), function(i) {     gc()     setAutoBlockSize(i)     bpp <- SerialParam()     system.time({         id <- cl_start(paste0(\"AutoBlockSize_\", i))         dec_delay <- modelGeneVarByPoisson(             sce_delay, block=sce_delay$sample, BPPARAM=bpp         )         cl_stop(id)     }) })  # cpu setAutoBlockSize(.Machine$integer.max) times_delayed <- lapply(1:5 * 2L, function(i) {     message(i)     bpp <- MulticoreParam(i)     system.time({         id <- cl_start(paste0(\"cpu_\", i))         dec_delay <- modelGeneVarByPoisson(             sce_delay, block=sce_delay$sample, BPPARAM=bpp         )         cl_stop(id)     }) })"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/performance_summary.html","id":"gb-memory","dir":"Articles","previous_headings":"Workflow running performance of DelayedArray with different parameters setup","what":"240 GB memory","title":"Performance Summary","text":"File id: e2874fd9-af11-4adf-a47a-f380b7606434, cell count: 19361 autoBlockSize Number cpus File id: 7125c914-29a6-476d-ad23-949d06c371ef, cell count: 94256 autoBlockSize Number cpus","code":""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/performance_summary.html","id":"gb-memory-1","dir":"Articles","previous_headings":"Workflow running performance of DelayedArray with different parameters setup","what":"120 GB memory","title":"Performance Summary","text":"File id: e2874fd9-af11-4adf-a47a-f380b7606434, cell count: 19361 autoBlockSize Number cpus File id: 7125c914-29a6-476d-ad23-949d06c371ef, cell count: 94256 autoBlockSize Number cpus","code":""},{"path":[]},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"install-packages","dir":"Articles","previous_headings":"","what":"Install packages","title":"Data import from cellxgene","text":"","code":"BiocManager::install(\"cellxgenedp\") BiocManager::install(\"Bioconductor/AnVIL\") BiocManager::install(\"zellkonverter\") BiocManager::install(\"HDF5Array\") BiocManager::install(\"yubocheng/Rcollectlworkflowh5ad\")"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"get-manifests","dir":"Articles","previous_headings":"","what":"Get manifests","title":"Data import from cellxgene","text":"Filter need provided identify h5ad file(s) analysis, manifests file(s) can retrieved.","code":"library(cellxgenedp) library(dplyr) library(AnVIL) library(Rcollectlworkflowh5ad)  manifest_tibble <- get_manifest_tibble() |>   filter(   name == \"Immunophenotyping of COVID-19 and influenza highlights the role of type I interferons in development of severe COVID-19\",   filetype == \"H5AD\" )  manifest_tibble ## # A tibble: 1 × 7 ##   dataset_id            collection_id name  donor_id cell_count file_id filetype ##   <chr>                 <chr>         <chr> <list>        <int> <chr>   <chr>    ## 1 cfbd466e-becf-47b9-8… 4f889ffc-d4b… Immu… <list>        59572 1dd3b1… H5AD"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"decide-sample-to-analyze","dir":"Articles","previous_headings":"","what":"Decide sample to analyze","title":"Data import from cellxgene","text":"explore h5ad file, import R SingleCellExperiment object, sample analyze come names(colData(sce)).","code":"library(cellxgenedp) library(dplyr) h5ad_file <- files(db()) |> filter(file_id == manifest_tibble$file_id) |> files_download(dry.run = FALSE)  library(zellkonverter) library(HDF5Array) library(SingleCellExperiment) sce <- readH5AD(h5ad_file, use_hdf5 = TRUE, reader = \"R\") names(colData(sce)) ##  [1] \"Sample.ID\"                                ##  [2] \"Disease.group\"                            ##  [3] \"Comorbidity\"                              ##  [4] \"Hospital.day\"                             ##  [5] \"WBC.per.microL\"                           ##  [6] \"Neutrophil.per.microL....\"                ##  [7] \"Lymphocyte.per.microL....\"                ##  [8] \"Monocyte.prt.microL....\"                  ##  [9] \"C.reactive.protein..mg.per.dL.\"           ## [10] \"Chest.X.ray\"                              ## [11] \"Treatment\"                                ## [12] \"Respiratory.rate..BPM.\"                   ## [13] \"O2.saturation\"                            ## [14] \"O2.supplement\"                            ## [15] \"Temperature\"                              ## [16] \"Systolic.BP\"                              ## [17] \"Heart.rate..BPM.\"                         ## [18] \"Consciousness\"                            ## [19] \"NEWS.score\"                               ## [20] \"Severity\"                                 ## [21] \"Celltype\"                                 ## [22] \"Number.of.UMI\"                            ## [23] \"Number.of.Gene\"                           ## [24] \"Percentage.of.mitochondrial.gene\"         ## [25] \"Age\"                                      ## [26] \"tissue_ontology_term_id\"                  ## [27] \"assay_ontology_term_id\"                   ## [28] \"disease_ontology_term_id\"                 ## [29] \"cell_type_ontology_term_id\"               ## [30] \"self_reported_ethnicity_ontology_term_id\" ## [31] \"development_stage_ontology_term_id\"       ## [32] \"sex_ontology_term_id\"                     ## [33] \"is_primary_data\"                          ## [34] \"organism_ontology_term_id\"                ## [35] \"donor_id\"                                 ## [36] \"suspension_type\"                          ## [37] \"cell_type\"                                ## [38] \"assay\"                                    ## [39] \"disease\"                                  ## [40] \"organism\"                                 ## [41] \"sex\"                                      ## [42] \"tissue\"                                   ## [43] \"self_reported_ethnicity\"                  ## [44] \"development_stage\""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"import-manifest-file-date-to-table-file","dir":"Articles","previous_headings":"","what":"Import manifest file date to table “file”","title":"Data import from cellxgene","text":"Six variables: manifest_tibble, id, sample, dgCMatrix, core, mem_gb needed import file data table “file”. Id unique id file table. dgCMatrix logical scalar indicate whether assay loaded dgCMatrix (TRUE, default value) HDF5-based matrices HDF5Array package (FALSE), value TRUE suggested h5ad file larger 500 MB. Core number CPU cores required workflow run, default value 3. Mem_gb memory required workflow, default value 60 GB.","code":"sample = \"Disease.group\" id = sprintf(\"%04d\", dim(avtable(\"file\"))[1] + 1) update_file_avtable(manifest_tibble, id, sample, dgCMatrix, core, mem_gb) avtable(\"file\")"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"run-workflow","dir":"Articles","previous_headings":"","what":"Run workflow","title":"Data import from cellxgene","text":"run Rcollectlworkflowh5ad, click Rcollectlworkflowh5ad WORKFLOWS tab, select file “Step 1 Select root entity type:”. INPUTS, select attribute .file_id variable fileId, attribute .knitr_eval variable knitr_eval, attribute .dgCMatrix variable dgCMatrix, attribute .sample variable sample. using attribute .mem_gb .core leave blank variables mem_gb core, default values applied. OUTPUTS, attributes filled “Use defaults”. saving workflow, run selecting h5ad file analyze “Step 2 SELECT DATA”.","code":""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"pull-workflow-output","dir":"Articles","previous_headings":"","what":"Pull workflow output","title":"Data import from cellxgene","text":"Workflow outputs pulled viewed R.","code":"avworkspace(\"bioconductor-rpci-yubo/Rcollectlworkflowh5ad\") avworkflow_jobs() fls <- avworkflow_files() fls"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/terra_data_import.html","id":"r-session-information","dir":"Articles","previous_headings":"","what":"R session information","title":"Data import from cellxgene","text":"","code":"## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.3.1 (2023-06-16) ##  os       Ubuntu 22.04.2 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en ##  collate  C.UTF-8 ##  ctype    C.UTF-8 ##  tz       UTC ##  date     2023-07-31 ##  pandoc   2.19.2 @ /usr/bin/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ##  package               * version   date (UTC) lib source ##  abind                 * 1.4-5     2016-07-21 [2] RSPM ##  AnVIL                 * 1.12.3    2023-05-26 [2] Bioconductor ##  basilisk                1.12.1    2023-06-30 [2] Bioconductor ##  basilisk.utils          1.12.1    2023-05-19 [2] Bioconductor ##  Biobase               * 2.60.0    2023-04-25 [2] Bioconductor ##  BiocGenerics          * 0.46.0    2023-04-25 [2] Bioconductor ##  bitops                  1.0-7     2021-04-24 [2] RSPM ##  bslib                   0.5.0     2023-06-09 [2] RSPM ##  cachem                  1.0.8     2023-05-01 [2] RSPM ##  cellxgenedp           * 1.4.0     2023-04-25 [2] Bioconductor ##  cli                     3.6.1     2023-03-23 [2] RSPM ##  crayon                  1.5.2     2022-09-29 [2] RSPM ##  curl                    5.0.1     2023-06-07 [2] RSPM ##  DelayedArray          * 0.26.7    2023-07-28 [2] Bioconductor ##  desc                    1.4.2     2022-09-08 [2] RSPM ##  digest                  0.6.33    2023-07-07 [2] RSPM ##  dir.expiry              1.8.0     2023-04-25 [2] Bioconductor ##  dplyr                 * 1.1.2     2023-04-20 [2] RSPM ##  DT                      0.28      2023-05-18 [2] RSPM ##  ellipsis                0.3.2     2021-04-29 [2] RSPM ##  evaluate                0.21      2023-05-05 [2] RSPM ##  fansi                   1.0.4     2023-01-22 [2] RSPM ##  fastmap                 1.1.1     2023-02-24 [2] RSPM ##  filelock                1.0.2     2018-10-05 [2] RSPM ##  formatR                 1.14      2023-01-17 [2] RSPM ##  fs                      1.6.3     2023-07-20 [2] RSPM ##  futile.logger           1.4.3     2016-07-10 [2] RSPM ##  futile.options          1.0.1     2018-04-20 [2] RSPM ##  generics                0.1.3     2022-07-05 [2] RSPM ##  GenomeInfoDb          * 1.36.1    2023-06-21 [2] Bioconductor ##  GenomeInfoDbData        1.2.10    2023-07-31 [2] Bioconductor ##  GenomicRanges         * 1.52.0    2023-04-25 [2] Bioconductor ##  glue                    1.6.2     2022-02-24 [2] RSPM ##  HDF5Array             * 1.28.1    2023-05-01 [2] Bioconductor ##  htmltools               0.5.5     2023-03-23 [2] RSPM ##  htmlwidgets             1.6.2     2023-03-17 [2] RSPM ##  httpuv                  1.6.11    2023-05-11 [2] RSPM ##  httr                    1.4.6     2023-05-08 [2] RSPM ##  IRanges               * 2.34.1    2023-06-22 [2] Bioconductor ##  jquerylib               0.1.4     2021-04-26 [2] RSPM ##  jsonlite                1.8.7     2023-06-29 [2] RSPM ##  knitr                   1.43      2023-05-25 [2] RSPM ##  lambda.r                1.2.4     2019-09-18 [2] RSPM ##  later                   1.3.1     2023-05-02 [2] RSPM ##  lattice                 0.21-8    2023-04-05 [4] CRAN (R 4.3.1) ##  lifecycle               1.0.3     2022-10-07 [2] RSPM ##  magrittr                2.0.3     2022-03-30 [2] RSPM ##  Matrix                * 1.5-4.1   2023-05-18 [4] CRAN (R 4.3.1) ##  MatrixGenerics        * 1.12.3    2023-07-30 [2] Bioconductor ##  matrixStats           * 1.0.0     2023-06-02 [2] RSPM ##  memoise                 2.0.1     2021-11-26 [2] RSPM ##  mime                    0.12      2021-09-28 [2] RSPM ##  miniUI                  0.1.1.1   2018-05-18 [2] RSPM ##  pillar                  1.9.0     2023-03-22 [2] RSPM ##  pkgconfig               2.0.3     2019-09-22 [2] RSPM ##  pkgdown                 2.0.7     2022-12-14 [2] RSPM ##  png                     0.1-8     2022-11-29 [2] RSPM ##  promises                1.2.0.1   2021-02-11 [2] RSPM ##  purrr                   1.0.1     2023-01-10 [2] RSPM ##  R6                      2.5.1     2021-08-19 [2] RSPM ##  ragg                    1.2.5     2023-01-12 [2] RSPM ##  rapiclient              0.1.3     2020-01-17 [2] RSPM ##  Rcollectlworkflowh5ad * 0.1.0     2023-07-31 [1] local ##  Rcpp                    1.0.11    2023-07-06 [2] RSPM ##  RCurl                   1.98-1.12 2023-03-27 [2] RSPM ##  reticulate              1.30      2023-06-09 [2] RSPM ##  rhdf5                 * 2.44.0    2023-04-25 [2] Bioconductor ##  rhdf5filters            1.12.1    2023-04-30 [2] Bioconductor ##  Rhdf5lib                1.22.0    2023-04-25 [2] Bioconductor ##  rjsoncons               1.0.0     2022-09-29 [2] RSPM ##  rlang                   1.1.1     2023-04-28 [2] RSPM ##  rmarkdown               2.23      2023-07-01 [2] RSPM ##  rprojroot               2.0.3     2022-04-02 [2] RSPM ##  S4Arrays              * 1.0.5     2023-07-24 [2] Bioconductor ##  S4Vectors             * 0.38.1    2023-05-02 [2] Bioconductor ##  sass                    0.4.7     2023-07-15 [2] RSPM ##  sessioninfo           * 1.2.2     2021-12-06 [2] RSPM ##  shiny                   1.7.4.1   2023-07-06 [2] RSPM ##  SingleCellExperiment  * 1.22.0    2023-04-25 [2] Bioconductor ##  stringi                 1.7.12    2023-01-11 [2] RSPM ##  stringr                 1.5.0     2022-12-02 [2] RSPM ##  SummarizedExperiment  * 1.30.2    2023-06-06 [2] Bioconductor ##  systemfonts             1.0.4     2022-02-11 [2] RSPM ##  textshaping             0.3.6     2021-10-13 [2] RSPM ##  tibble                  3.2.1     2023-03-20 [2] RSPM ##  tidyr                   1.3.0     2023-01-24 [2] RSPM ##  tidyselect              1.2.0     2022-10-10 [2] RSPM ##  utf8                    1.2.3     2023-01-31 [2] RSPM ##  vctrs                   0.6.3     2023-06-14 [2] RSPM ##  withr                   2.5.0     2022-03-03 [2] RSPM ##  xfun                    0.39      2023-04-20 [2] RSPM ##  xtable                  1.8-4     2019-04-21 [2] RSPM ##  XVector                 0.40.0    2023-04-25 [2] Bioconductor ##  yaml                    2.3.7     2023-01-23 [2] RSPM ##  zellkonverter         * 1.10.1    2023-05-23 [2] Bioconductor ##  zlibbioc                1.46.0    2023-04-25 [2] Bioconductor ##  ##  [1] /tmp/Rtmp6bQehQ/temp_libpath8a2a7ba42677 ##  [2] /home/runner/work/_temp/Library ##  [3] /opt/R/4.3.1/lib/R/site-library ##  [4] /opt/R/4.3.1/lib/R/library ##  ## ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"set-up-parameters","dir":"Articles","previous_headings":"","what":"Set up parameters","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"File id h5ad file analyze obtained using package cellxgenedp, one example shows . Column analyze needs specified colData dataset. importing h5ad file SingleCellExperiment object, store assay dgCMatrix DelayedMatrix. parameters set , workflow started.","code":"library(cellxgenedp) library(dplyr) left_join(   datasets(db()) |> select(dataset_id, collection_id, donor_id, name, cell_count),   files(db()) |> select(dataset_id, file_id, filetype),   by = \"dataset_id\" ) |> filter(   name == \"Direct Exposure to SARS-CoV-2 and Cigarette Smoke Increases Infection Severity and Alters the Stem Cell-Derived Airway Repair Response\",   filetype == \"H5AD\" ) fileId <- params$fileId sample <- params$sample dgCMatrix <- params$dgCMatrix core <- params$core mem_gb <- params$mem_gb ## file id fileId ## [1] \"e2874fd9-af11-4adf-a47a-f380b7606434\" ## column selected for analysis sample ## [1] \"Name\" ## number of CPU cores detected parallel::detectCores() ## [1] 2 ## dgCMatrix dgCMatrix ## [1] TRUE ## number of CPU cores asked core ## [1] 3 ## memory  sprintf(\"%d GB\", params$mem_gb) ## [1] \"60 GB\""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"start-for-rcollectl-and-download-h5ad-file","dir":"Articles","previous_headings":"","what":"Start for Rcollectl and download h5ad file","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"library(Rcollectl) library(cellxgenedp) library(dplyr)  ## download h5ad file h5ad_file <- files(db()) |>   filter(file_id == params$fileId) |> files_download(dry.run = FALSE)  ## start Rcollectl id <- cl_start(basename(h5ad_file))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-data-preparation","dir":"Articles","previous_headings":"","what":"Step data preparation","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"# record start time of each step cl_timestamp(id, \"data preparation\")  ## import h5ad file library(zellkonverter) library(HDF5Array) if (dgCMatrix == TRUE) {   sce <- readH5AD(h5ad_file, reader = \"R\") } else {   sce <- readH5AD(h5ad_file, use_hdf5 = TRUE, reader = \"R\") }  ## pre-process data library(SingleCellExperiment) sce$sample <- colData(sce)[, sample]  library(EnsDb.Hsapiens.v86) rowData(sce)$Chr <- mapIds(EnsDb.Hsapiens.v86, keys=rownames(sce), column=\"SEQNAME\", keytype=\"GENEID\")  names(assays(sce)) <- \"counts\""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"set-auto-block-size","dir":"Articles","previous_headings":"","what":"set auto block size","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"library(DelayedArray) setAutoBlockSize(size=min(.Machine$integer.max, mem_gb*1e+9))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-quality-control","dir":"Articles","previous_headings":"","what":"Step quality control","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_timestamp(id, \"quality control\")  library(BiocParallel) library(scater)  bpp <- MulticoreParam(as.integer(core))  sce <- unfiltered <- addPerCellQC(sce, BPPARAM=bpp, subsets=list(Mito=which(rowData(sce)$Chr==\"MT\"))) qc <- quickPerCellQC(colData(sce), batch=sce$sample, sub.fields=\"subsets_Mito_percent\")  sce <- sce[,!qc$discard] unfiltered$discard <- qc$discard  ## Distribution of QC metrics in the dataset. Each point represents a cell and is colored according to whether it was discarded gridExtra::grid.arrange(     plotColData(unfiltered, x=\"sample\", y=\"sum\", colour_by=\"discard\") +         scale_y_log10() + ggtitle(\"Total count\"),     plotColData(unfiltered, x=\"sample\", y=\"detected\", colour_by=\"discard\") +         scale_y_log10() + ggtitle(\"Detected features\"),     plotColData(unfiltered, x=\"sample\", y=\"subsets_Mito_percent\",                 colour_by=\"discard\") + ggtitle(\"Mito percent\"),     ncol=2 )  ## Percentage of mitochondrial reads in each cell in the dataset compared to its total count. Each point represents a cell and is colored according to whether that cell was discarded plotColData(unfiltered, x=\"sum\", y=\"subsets_Mito_percent\", colour_by=\"discard\") + scale_x_log10()  ## Normalization sce <- logNormCounts(sce, size_factors = sce$sum) summary(sizeFactors(sce))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-variance-modeling","dir":"Articles","previous_headings":"","what":"Step variance modeling","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_timestamp(id, \"variance modeling\")  library(scran) set.seed(101001)  dec <- modelGeneVarByPoisson(sce, block=sce$sample, BPPARAM=bpp) top <- getTopHVGs(dec, n=5000)  ## Per-gene variance as a function of the mean for the log-expression values in the dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances par(mfrow=c(4,2)) par(mar=c(1,1,1,1)) blocked.stats <- dec$per.block for (i in colnames(blocked.stats)) {     current <- blocked.stats[[i]]     plot(current$mean, current$total, main=i, pch=16, cex=0.5,          xlab=\"Mean of log-expression\", ylab=\"Variance of log-expression\")     curfit <- metadata(current)     curve(curfit$trend(x), col='dodgerblue', add=TRUE, lwd=2) }"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-data-integration","dir":"Articles","previous_headings":"","what":"Step data integration","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"# This step takes longer time cl_timestamp(id, \"data integration\")  library(batchelor) library(BiocNeighbors)  set.seed(1010001) merged <- fastMNN(sce, batch = sce$sample, subset.row = top,                   BSPARAM=BiocSingular::RandomParam(deferred = TRUE),                    BNPARAM=AnnoyParam(), BPPARAM=bpp)  reducedDim(sce, 'MNN') <- reducedDim(merged, 'corrected') metadata(merged)$merge.info$lost.var"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-dimensionality-reduction","dir":"Articles","previous_headings":"","what":"Step dimensionality reduction","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_timestamp(id, \"dimensionality reduction\")  library(uwot) set.seed(1010001) sce <- runUMAP(sce, dimred=\"MNN\",                     external_neighbors=TRUE,                      BNPARAM=AnnoyParam(),                     BPPARAM=bpp,                     n_threads=bpnworkers(bpp))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-clustering","dir":"Articles","previous_headings":"","what":"Step clustering","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_timestamp(id, \"clustering\")  library(bluster)  set.seed(1010001) colLabels(sce) <- clusterRows(reducedDim(sce, \"MNN\"), TwoStepParam(KmeansParam(centers=1000), NNGraphParam(k=5)))  table(colLabels(sce))  tab <- table(Cluster=colLabels(sce), sample=sce$sample)  ## Heatmap of log10-number of cells in each cluster (row) from each sample (column) library(pheatmap) pheatmap(log10(tab+10), color=viridis::viridis(100))  scrambled <- sample(ncol(sce))  ## UMAP plots of the dataset after merging. Each point represents a cell and is colored according to the assigned cluster (top) or the sample of origin (bottom) gridExtra::grid.arrange(     plotUMAP(sce, colour_by=\"label\", text_by=\"label\"),     plotUMAP(sce[,scrambled], colour_by=\"sample\") )"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"step-differential-expression","dir":"Articles","previous_headings":"","what":"Step differential expression","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_timestamp(id, \"differential expression\")  markers <- findMarkers(sce, block = sce$sample, direction = 'up', lfc = 1, BPPARAM=bpp)  top.markers <- markers[[\"4\"]] best <- top.markers[top.markers$Top <= 10,] lfcs <- getMarkerEffects(best)  ## Heatmap of log2-fold changes for the top marker genes (rows) of cluster 4 compared to all other clusters (columns) pheatmap(lfcs, breaks=seq(-5, 5, length.out=101))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"stop-rcollectl","dir":"Articles","previous_headings":"","what":"Stop Rcollectl","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"cl_stop(id)"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad.html","id":"plot-collectl-result-with-time-stamp","dir":"Articles","previous_headings":"","what":"Plot collectl result with time stamp","title":"Single-Cell Analysis Workflow of cellxgene h5ad File","text":"","code":"path <- cl_result_path(id) plot_usage(cl_parse(path)) +   cl_timestamp_layer(path) +   cl_timestamp_label(path) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))"},{"path":[]},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"set-up-parameters","dir":"Articles","previous_headings":"","what":"Set up parameters","title":"Workflow running performance of DelayedArray with different parameters setup","text":"Column analyze needs specified colData dataset.","code":"mem_gb <- params$mem_gb fileId <- params$fileId sample <- params$sample ## file id fileId ## [1] \"e2874fd9-af11-4adf-a47a-f380b7606434\" ## column selected for analysis sample ## [1] \"Name\" ## memory  sprintf(\"%d GB\", params$mem_gb) ## [1] \"120 GB\""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"download-h5ad-file","dir":"Articles","previous_headings":"","what":"Download h5ad file","title":"Workflow running performance of DelayedArray with different parameters setup","text":"","code":"library(Rcollectl) library(cellxgenedp) library(dplyr)  ## download h5ad file h5ad_file <- files(db()) |>   filter(file_id == fileId) |> files_download(dry.run = FALSE)"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"step-data-preparation","dir":"Articles","previous_headings":"","what":"Step data preparation","title":"Workflow running performance of DelayedArray with different parameters setup","text":"","code":"## import h5ad file library(zellkonverter) library(HDF5Array) sce <- readH5AD(h5ad_file, use_hdf5 = TRUE, reader = \"R\")  ## pre-process data library(SingleCellExperiment) sce$sample <- colData(sce)[, sample]  library(EnsDb.Hsapiens.v86) rowData(sce)$Chr <- mapIds(EnsDb.Hsapiens.v86, keys=rownames(sce), column=\"SEQNAME\", keytype=\"GENEID\")  names(assays(sce)) <- \"counts\""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"set-auto-block-size","dir":"Articles","previous_headings":"","what":"set auto block size","title":"Workflow running performance of DelayedArray with different parameters setup","text":"","code":"library(DelayedArray) setAutoBlockSize(size=min(.Machine$integer.max, mem_gb*1e+9))"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"step-quality-control","dir":"Articles","previous_headings":"","what":"Step quality control","title":"Workflow running performance of DelayedArray with different parameters setup","text":"","code":"library(BiocParallel) library(scater)  bpp <- MulticoreParam(as.integer(3))  sce <- unfiltered <- addPerCellQC(sce, BPPARAM=bpp, subsets=list(Mito=which(rowData(sce)$Chr==\"MT\"))) qc <- quickPerCellQC(colData(sce), batch=sce$sample, sub.fields=\"subsets_Mito_percent\") sce <- sce[,!qc$discard]  ## Normalization sce <- logNormCounts(sce, size_factors = sce$sum) sce_delay <- sce"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"autoblocksize","dir":"Articles","previous_headings":"","what":"AutoBlockSize","title":"Workflow running performance of DelayedArray with different parameters setup","text":"different autoBlockSize set given memory cpu, Rcollectl used record computing resources usage.","code":"library(scran)  times_delayed_block_size <- lapply(67108864L * 2L^(0:5), function(i) {     gc()     setAutoBlockSize(i)     bpp <- SerialParam()     system.time({           id <- cl_start(paste0(\"AutoBlockSize_\", i))         dec_delay <- modelGeneVarByPoisson(             sce_delay, block=sce_delay$sample, BPPARAM=bpp         )         cl_stop(id)     }) }) times_delayed_block_size"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/articles/workflow_cellxgene_h5ad_DelayedArray_parameters.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"Workflow running performance of DelayedArray with different parameters setup","text":"different number cpus set given memory autoBlockSize, Rcollectl used record computing resources usage.","code":"library(scran) setAutoBlockSize(.Machine$integer.max)  times_delayed_cpu <- lapply(1:6 * 2L, function(i) {     message(i)     bpp <- MulticoreParam(i)     system.time({         id <- cl_start(paste0(\"cpu_\", i))         dec_delay <- modelGeneVarByPoisson(             sce_delay, block=sce_delay$sample, BPPARAM=bpp         )         cl_stop(id)     }) }) times_delayed_cpu"},{"path":[]},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yubo Cheng. Author, maintainer.","code":""},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng Y (2023). Rcollectlworkflowh5ad: Single-Cell Analysis Workflow. R package version 0.1.0.","code":"@Manual{,   title = {Rcollectlworkflowh5ad: Single-Cell Analysis Workflow},   author = {Yubo Cheng},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"https://yubocheng.github.io/Rcollectlworkflowh5ad/index.html","id":"rcollectl-workflow","dir":"","previous_headings":"","what":"Rcollectl Workflow","title":"Single-Cell Analysis Workflow","text":"vignette package follows single-cell analysis workflow (workflow chapters “Orchestrating Single-Cell Analysis Bioconductor” book) analyze h5ad file cellxgene dataset tracks computing resources usage R package Rcollectl. Suggested computing resources: 60 GB memory, 3 CPU cores parameter knitr_eval set TRUE knit vignette. FileId file id h5ad file analyze. Sample one column names. Build docker image files inst/docker: Knit vignette built docker image generate output LOCAL_DIRECTORY:","code":"docker build -t bioconductor_docker_workflow_cellxgene_h5ad:devel . docker run -it -v LOCAL_DIRECTORY:/output --rm \\     --env knitr_eval=TRUE \\     --env fileId=\"e2874fd9-af11-4adf-a47a-f380b7606434\" \\     --env sample=\"Name\" \\     --env dgCMatrix=TRUE \\     --env core=3 \\     --env mem_gb=60 \\     bioconductor_docker_workflow_cellxgene_h5ad:devel"}]
